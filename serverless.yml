# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: TerralanesAPI
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  profile: default
  stage: dev

plugins:
  - serverless-offline-local-authorizers-plugin
  - serverless-offline

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:

# User
  getUser:
    handler:
      ./handlers/user.getUser
    events:
        - http:
            path: api/user
            method: get
            headers:
              - Authorization


# Customer
  getCustomersByCurrentUser:
    handler:
      ./handlers/customer.getCustomersByCurrentUser
    events:
        - http:
            path: api/customer
            method: get
            headers:
              - Authorization
# Lane
  getLanesByCurrentUser:
    handler:
      ./handlers/lane.getLanesByCurrentUser
    events:
        - http:
            path: api/lane
            method: get
            headers:
              - Authorization
  getLane:
    handler:
      ./handlers/lane.getLane
    events:
        - http:
            path: api/lane/{lane_id}
            method: get
            headers:
              - Content-Type
              - Authorization
            # authorizer:
            #   arn: arn:aws:lambda:us-east-1:1234567890:function:auth
            # identitySource:
            #   - 'route.request.header.Auth'
            #   - 'route.request.querystring.Auth'
            # localAuthorizer:
            #     name: "mylocalAuthProxyFn"
            #     type: "request"

            # authorizer:
            # type: CUSTOM
            # authorizerId: abcjfk
            # localAuthorizer:
            #   name: "mylocalAuthProxyFn"
            #   type: "request"

  deleteLane:
    handler:
      ./handlers/lane.deleteLane
    events:
        - http:
            path: api/lane/{lane_id}
            method: delete

  addLane:
    handler:
      ./handlers/lane.addLane
    events: 
        - http:
            path: api/lane
            method: post
