# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: TerralanesAPI
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  profile: default
  stage: dev

plugins:
  - serverless-offline-local-authorizers-plugin
  - serverless-offline

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:

# Search
  search:
    handler:
      ./handlers/search.search
    events:
        - http:
            path: api/search
            method: get
            headers:
              - Authorization
  searchLedger:
    handler:
      ./handlers/search.searchLedger
    events:
        - http:
            path: api/ledger/search
            method: get
            headers:
              - Authorization

# Ledger
  getLedger:
    handler:
      ./handlers/ledger.getLedger
    events:
        - http:
            path: api/ledger/{id}
            method: get
            headers:
              - Authorization
              
  writeMessage:
    handler:
      ./handlers/ledger.writeMessage
    events:
        - http:
            path: api/ledger
            method: post
            headers:
              - Authorization
  deleteMessage:
    handler:
      ./handlers/ledger.deleteMessage
    events:
        - http:
            path: api/ledger/message/{id}
            method: delete
            headers:
              - Authorization
  editMessage:
    handler:
      ./handlers/ledger.editMessage
    events:
        - http:
            path: api/ledger/message/{id}
            method: put
            headers:
              - Authorization

# User
  getUser:
    handler:
      ./handlers/user.getUser
    events:
        - http:
            path: api/user
            method: get
            headers:
              - Authorization
  getUserById:
    handler:
      ./handlers/user.getUserById
    events:
        - http:
            path: api/user/{id}
            method: get
            headers:
              - Authorization
  getTeams:
    handler:
      ./handlers/user.getTeams
    events:
        - http:
            path: api/user/teams
            method: get
            headers:
              - Authorization
  createProfile:
    handler:
      ./handlers/user.createProfile
    events:
        - http:
            path: api/user
            method: post
  updateProfile:
    handler:
      ./handlers/user.updateProfile
    events:
        - http:
            path: api/user
            method: put
            headers:
              - Authorization


# Customer
  updateCustomer:
    handler:
      ./handlers/customer.updateCustomer
    events:
        - http:
            path: api/customer/{customerId}
            method: put
            headers:
              - Authorization
  getCustomer:
    handler:
      ./handlers/customer.getCustomer
    events:
        - http:
            path: api/customer/{customerId}
            method: get
            headers:
              - Content-Type
              - Authorization
  getTopCustomers:
    handler:
      ./handlers/customer.getTopCustomers
    events:
        - http:
            path: api/customer/top/{userId}
            method: get
            headers:
              - Content-Type
              - Authorization
  getLanesForCustomer:
    handler:
      ./handlers/customer.getLanesForCustomer
    events:
        - http:
            path: api/lanes/customer/{customerId}
            method: get
            headers:
              - Content-Type
              - Authorization

# Lane
  getLanesByCurrentUser:
    handler:
      ./handlers/lane.getLanesByCurrentUser
    events:
        - http:
            path: api/lane
            method: get
            headers:
              - Authorization
  getLanesByUser:
    handler:
      ./handlers/lane.getLanesByUser
    events:
        - http:
            path: api/lane/user/{id}
            method: get
            headers:
              - Authorization
  getLaneById:
    handler:
      ./handlers/lane.getLaneById
    events:
        - http:
            path: api/lane/{laneId}
            method: get
            headers:
              - Authorization
  updateLane:
    handler:
      ./handlers/lane.updateLane
    events:
        - http:
            path: api/lane/{laneId}
            method: put

  # Location
  getLocationById:
    handler:
      ./handlers/location.getLocationById
    events:
        - http:
            path: api/location/{id}
            method: get
  getLanesForLocation:
    handler:
      ./handlers/location.getLanesForLocation
    events:
        - http:
            path: api/location/{id}/lanes
            method: get

  # CSV Upload
  ascendLoadsUpload:
    handler:
      ./handlers/upload.ascendLoadsUpload
    events:
        - http:
            path: api/upload/ascend
            method: post
  ascendCustomerUpload:
    handler:
      ./handlers/upload.ascendCustomerUpload
    events:
        - http:
            path: api/upload/ascend/customers
            method: post